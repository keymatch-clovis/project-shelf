// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    city,
    customer,
    customerMemento,
    invoice,
    product,
    productInvoice,
    productMemento,
  ];
  late final Shape0 city = Shape0(
      source: i0.VersionedTable(
        entityName: 'city',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 customer = Shape1(
      source: i0.VersionedTable(
        entityName: 'customer',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uuid)',
        ],
        columns: [
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 customerMemento = Shape2(
      source: i0.VersionedTable(
        entityName: 'customer_memento',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uuid)',
        ],
        columns: [
          _column_3,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 invoice = Shape3(
      source: i0.VersionedTable(
        entityName: 'invoice',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uuid)',
        ],
        columns: [
          _column_3,
          _column_13,
          _column_9,
          _column_14,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 product = Shape4(
      source: i0.VersionedTable(
        entityName: 'product',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uuid)',
        ],
        columns: [
          _column_3,
          _column_4,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 productInvoice = Shape5(
      source: i0.VersionedTable(
        entityName: 'product_invoice',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(product_uuid, invoice_uuid)',
        ],
        columns: [
          _column_17,
          _column_15,
          _column_18,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 productMemento = Shape6(
      source: i0.VersionedTable(
        entityName: 'product_memento',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(uuid)',
        ],
        columns: [
          _column_3,
          _column_9,
          _column_10,
          _column_11,
          _column_19,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get rowId =>
      columnsByName['row_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get city =>
      columnsByName['city']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get department =>
      columnsByName['department']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('row_id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('city', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('department', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get address =>
      columnsByName['address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get cityRowId =>
      columnsByName['city_row_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get businessName =>
      columnsByName['business_name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('phone', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('address', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('city_row_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES city (row_id)'));
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('business_name', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get version =>
      columnsByName['version']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get customerUuid =>
      columnsByName['customer_uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date', aliasedName, false,
        type: i1.DriftSqlType.dateTime,
        defaultValue: const CustomExpression(
            'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)'));
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('data', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('version', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('customer_uuid', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES customer (uuid)'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get number =>
      columnsByName['number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get discount =>
      columnsByName['discount']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get customerUuid =>
      columnsByName['customer_uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('number', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'));
i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('discount', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<BigInt> get price =>
      columnsByName['price']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<int> get stock =>
      columnsByName['stock']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<BigInt> _column_15(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('price', aliasedName, false,
        type: i1.DriftSqlType.bigInt);
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('stock', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get count =>
      columnsByName['count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<BigInt> get price =>
      columnsByName['price']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get discount =>
      columnsByName['discount']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<String> get productUuid =>
      columnsByName['product_uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get invoiceUuid =>
      columnsByName['invoice_uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('count', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<BigInt> _column_18(String aliasedName) =>
    i1.GeneratedColumn<BigInt>('discount', aliasedName, false,
        type: i1.DriftSqlType.bigInt);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('product_uuid', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES product (uuid)'));
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('invoice_uuid', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES invoice (uuid)'));

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get version =>
      columnsByName['version']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get productUuid =>
      columnsByName['product_uuid']! as i1.GeneratedColumn<String>;
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
